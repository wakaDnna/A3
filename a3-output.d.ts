/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/posts": {
    /**
     * 全ての投稿を取得
     * @description 全ての投稿を取得します
     */
    get: operations["get_posts_posts_get"];
    /**
     * 新規投稿
     * @description 新規に投稿を行います
     */
    post: operations["create_post_posts_post"];
  };
  "/posts/{post_id}": {
    /**
     * 1件の投稿内容を取得
     * @description 指定された投稿IDの投稿内容を取得します
     */
    get: operations["get_post_posts__post_id__get"];
    /**
     * 投稿内容を更新
     * @description 指定された投稿の内容を更新します
     */
    put: operations["update_post_posts__post_id__put"];
    /**
     * 投稿を削除
     * @description 指定された投稿を削除します
     */
    delete: operations["delete_post_posts__post_id__delete"];
  };
  "/users": {
    /**
     * ユーザ情報一覧を取得
     * @description ユーザの一覧を取得します
     */
    get: operations["get_users_users_get"];
    /**
     * ユーザを新規作成
     * @description ユーザを新規作成します
     */
    post: operations["create_user_users_post"];
  };
  "/users/{user_id}": {
    /**
     * 1件のユーザ情報を取得
     * @description ユーザIDからユーザ情報を検索します
     */
    get: operations["get_user_users__user_id__get"];
    /**
     * ユーザ情報を更新
     * @description 指定されたユーザIDのユーザ情報を更新します
     */
    put: operations["update_user_users__user_id__put"];
    /**
     * ユーザを削除
     * @description 指定されたユーザIDのユーザ情報を削除します
     */
    delete: operations["delete_user_users__user_id__delete"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** CreatePost */
    CreatePost: {
      /** User Id */
      user_id: string;
      /** Content */
      content: string;
    };
    /** CreateUser */
    CreateUser: {
      /** Name */
      name: string;
      /** Display Id */
      display_id: string;
      /** Bio */
      bio?: string | null;
    };
    /** DeletePost */
    DeletePost: {
      /** Id */
      id: number;
      /** User Id */
      user_id: string;
      /** Content */
      content: string;
    };
    /** DeleteUser */
    DeleteUser: {
      /** User Id */
      user_id: string;
      /** Name */
      name: string;
      /** Display Id */
      display_id: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** PostBase */
    PostBase: {
      /** Id */
      id: number;
      /** User Id */
      user_id: string;
      /** Content */
      content: string;
      /** Created At */
      created_at?: string | null;
    };
    /** UpdatePost */
    UpdatePost: {
      /** Content */
      content: string;
    };
    /** UpdateUser */
    UpdateUser: {
      /** Name */
      name: string;
      /** Display Id */
      display_id: string;
      /** Bio */
      bio: string;
      /**
       * Birthday
       * Format: date
       */
      birthday: string;
    };
    /** UserBase */
    UserBase: {
      /** Id */
      id: string;
      /** Name */
      name: string;
      /** Display Id */
      display_id: string;
      /** Bio */
      bio?: string | null;
      /** Image */
      image?: string | null;
      /**
       * Followers Count
       * @default 0
       */
      followers_count?: number | null;
      /**
       * Following Count
       * @default 0
       */
      following_count?: number | null;
      /** Birthday */
      birthday?: string | null;
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * 全ての投稿を取得
   * @description 全ての投稿を取得します
   */
  get_posts_posts_get: {
    parameters: {
      query?: {
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PostBase"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 新規投稿
   * @description 新規に投稿を行います
   */
  create_post_posts_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePost"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PostBase"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 1件の投稿内容を取得
   * @description 指定された投稿IDの投稿内容を取得します
   */
  get_post_posts__post_id__get: {
    parameters: {
      query?: {
        id?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PostBase"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 投稿内容を更新
   * @description 指定された投稿の内容を更新します
   */
  update_post_posts__post_id__put: {
    parameters: {
      path: {
        post_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePost"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 投稿を削除
   * @description 指定された投稿を削除します
   */
  delete_post_posts__post_id__delete: {
    parameters: {
      path: {
        post_id: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DeletePost"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * ユーザ情報一覧を取得
   * @description ユーザの一覧を取得します
   */
  get_users_users_get: {
    parameters: {
      query?: {
        offset?: number;
        limit?: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserBase"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * ユーザを新規作成
   * @description ユーザを新規作成します
   */
  create_user_users_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUser"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserBase"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 1件のユーザ情報を取得
   * @description ユーザIDからユーザ情報を検索します
   */
  get_user_users__user_id__get: {
    parameters: {
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserBase"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * ユーザ情報を更新
   * @description 指定されたユーザIDのユーザ情報を更新します
   */
  update_user_users__user_id__put: {
    parameters: {
      query?: {
        id?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUser"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserBase"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * ユーザを削除
   * @description 指定されたユーザIDのユーザ情報を削除します
   */
  delete_user_users__user_id__delete: {
    parameters: {
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteUser"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
